{"title":"Citibike Availability and Usage","markdown":{"yaml":{"title":"Citibike Availability and Usage","author":"in NYC District","format":{"dashboard":{"orientation":"columns","theme":"darkly"}}},"headingText":"Import Tables from Citi Bike","containsRefs":false,"markdown":"\n\n```{r}\n#| message: false\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(tidyverse)\nlibrary(highcharter)\n```\n\n```{r}\njson_text <- fromJSON(\"https://gbfs.citibikenyc.com/gbfs/gbfs.json\")\n\n# Get Tables List\nfeeds <- json_text$data$en$feeds\n\n# Filter Necessary Tables\ninterested_datasets <- c(\"ebikes_at_stations\",\"station_information\",\"station_status\",\"system_regions\")\n\nfiltered_feeds <- feeds %>% filter(name %in% interested_datasets)\n\n# Create a named list of URLs for easier access\nurls_list <- setNames(filtered_feeds$url, filtered_feeds$name)\n```\n\n```{r}\n# Function to fetch and parse JSON data\nfetch_data <- function(url) {\n  response <- GET(url)\n  if (status_code(response) == 200) {\n    data <- content(response, \"text\")\n    json_data <- fromJSON(data)\n    return(as.data.frame(json_data))\n  } else {\n    stop(\"Failed to fetch data from\", url)\n  }\n}\n\n# Initialize an empty list to store the dataframes\ndataframes_list <- list()\n\n# Iterate over the urls_list to fetch and parse data for each dataset\nfor (name in names(urls_list)) {\n  url <- urls_list[[name]]\n  dataframes_list[[name]] <- fetch_data(url)\n}\n\nebikes_data_df <- dataframes_list[[\"ebikes_at_stations\"]]\nsystem_regions_df <- dataframes_list[[\"system_regions\"]]\nstation_info_data_df <- dataframes_list[[\"station_information\"]]\nstation_status_data_df <- dataframes_list[[\"station_status\"]]\n```\n\n```{r}\n# Wrangling\n## Ebikes Dataset\nflatten_ebikes <- function(row) {\n  # Extracting the nested list of ebikes\n  ebikes <- row[[\"data.stations.ebikes\"]]\n # If ebikes is NULL or empty, return a row with NA values for ebike attributes\n  if (is.null(ebikes) || length(ebikes) == 0) {\n    return(tibble(\n      conservative_range_miles = NA_real_,\n      estimated_range_miles = NA_real_,\n      rideable_id = NA_character_,\n      displayed_number = NA_character_,\n      docking_capability = NA_integer_,\n      make_and_model = NA_character_,\n      is_lbs_internal_rideable = NA_logical_,\n      battery_charge_percentage = NA_integer_\n    ))\n  }\n  # Flatten the nested ebikes data\n  ebikes_df <- map_df(ebikes, function(ebike) {\n    tibble(\n      conservative_range_miles = ebike$range_estimate$conservative_range_miles,\n      estimated_range_miles = ebike$range_estimate$estimated_range_miles,\n      rideable_id = ebike$rideable_id,\n      displayed_number = ebike$displayed_number,\n      docking_capability = ebike$docking_capability,\n      make_and_model = ebike$make_and_model,\n      is_lbs_internal_rideable = ebike$is_lbs_internal_rideable,\n      battery_charge_percentage = ebike$battery_charge_percentage\n    )\n  })\n  # Add other non-nested attributes to the flattened ebikes dataframe\n  ebikes_df <- ebikes_df %>%\n    mutate(\n      station_id = row[[\"data.stations.station_id\"]],\n      last_updated = row[[\"last_updated\"]],\n      ttl = row[[\"ttl\"]],\n      version = row[[\"version\"]]\n    )\n  \n  return(ebikes_df)\n}\n\nflattened_ebikes_df <- map_df(1:nrow(ebikes_data_df), function(i) {\n  flatten_ebikes(ebikes_data_df[i, ])\n})\n\nebikes_at_station_df  <- flattened_ebikes_df %>% \n    mutate(\n        station_id = str_replace_all(station_id, \".*_\", \"\")\n    )\n\n# stations datasets\ncolnames(station_info_data_df) <- gsub(\"^data\\\\.stations\\\\.\", \"\", colnames(station_info_data_df))\ncolnames(station_status_data_df) <- gsub(\"^data\\\\.stations\\\\.\", \"\", colnames(station_status_data_df))\ncolnames(system_regions_df)  <- gsub(\"^data\\\\.regions\\\\.\", \"\", colnames(system_regions_df))\n```\n\n```{r}\n# Aggregation\nebikes_at_station_agg  <- ebikes_at_station_df %>% \n    reframe(\n        n_ebike = n(),\n        mean_battery_pct = mean(battery_charge_percentage, na.rm = T),\n        .by = station_id\n    ) %>% \n    left_join(\n        station_info_data_df  %>% select(station_id, station_name = name, capacity,region_id, lat, lon),\n        join_by(station_id)\n    ) %>% \n    left_join(\n        system_regions_df  %>% select(region_id, region_name = name),\n        join_by(region_id)\n    ) %>% \n    mutate(\n        region_name = case_when(\n            is.na(region_name) ~ \"Others\",\n            TRUE ~ region_name\n        ),\n        pct_ebikes = n_ebike*100/capacity,\n        region_station = paste0(region_name,\": \",station_name))\n\ntop_ten_station  <- ebikes_at_station_agg %>%\n  select(region_station, pct_ebikes) %>%\n  arrange(desc(pct_ebikes)) %>%\n  head(10)\n\nebikes_at_station_count  <- ebikes_at_station_df %>% \n    select(station_id) %>%\n    left_join(\n        station_info_data_df %>% select(station_id, station_name = name,region_id),\n        join_by(station_id)\n    ) %>% \n    left_join(\n        system_regions_df  %>% select(region_id, region_name = name),\n        join_by(region_id)\n    ) %>% \n    mutate(\n        region_name = case_when(\n            is.na(region_name) ~ \"Others\",\n            TRUE ~ region_name\n        ),\n        region_station = paste0(region_name,\": \",station_name),\n        val = 1\n    )\n```\n```{r}\n# Visualization\n## Treemap: E-Bike distribution\n\ncols_1 <- c(\"#005f73\",\"#0a9396\",\"#94d2bd\",\"#e9d8a6\")\n\ntop_ten_station$clrs  <- highcharter::colorize(top_ten_station$pct_ebikes, cols_1)\ntt_x  <- c(\"Station Occupancy (%): \")\ntt_y  <- sprintf(\"{point.%s:.2f}\",c(\"pct_ebikes\"))\ntooltip_a  <- tooltip_table(tt_x,tt_y)\n\nebike_dist_bar <-hchart(\n  top_ten_station,\n  \"bar\",\n  hcaes(\n    region_station, \n    pct_ebikes,\n    color = clrs)\n  )|> \n   hc_xAxis(\n      categories = top_ten_station$region_station,\n      title = list(text = \"Station Occupancy\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Station\"),\n    gridLineWidth = 0\n    )  |>\n  hc_title(\n    text = \"Top Ten Occupied Stations\"\n    ) |> \n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = tooltip_a\n    ) |>\n  hc_add_theme(hc_theme_538())\n\n## scatterplot1: ebike usability\ntltip_x  <- c(\"Station\", \"District\", \"Capacity\", \"Occupancy\",\"Average Battery Percentage\")\ntltip_y <- c(sprintf(\"{point.%s}\",c(\"station_name\",\"region_name\")),sprintf(\"{point.%s:.2f}\",c(\"capacity\",\"pct_ebikes\",\"mean_battery_pct\")))\ntltip  <- tooltip_table(tltip_x,tltip_y)\n\nebike_use_scatter <- hchart(\n  ebikes_at_station_agg,\n  \"scatter\",\n  hcaes(\n    pct_ebikes, \n    mean_battery_pct, \n    size = capacity, \n    color = pct_ebikes),\n  minSize = 2,\n  maxSize = 20\n  )|>\n  hc_xAxis(\n    title = list(text = \"Station Occupancy\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Average Battery Percentage\"),\n    gridLineWidth = 0,\n    softMax = 90,\n    tickInterval = 10\n    ) |>\n  hc_title(\n    text = \"Ebikes Availability and Usage\"\n    ) |>\n  hc_subtitle(\n    text = \"in New York\"\n    ) |>\n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"\",\n    pointFormat = tltip\n    ) %>% \n hc_add_theme(hc_theme_538())\n\n## scatterplot2: battery efficiency\ntltip_x_2  <- c(\"Bike ID\", \"Model\",\"Battery Percentage\", \"Estimated Distance\")\ntltip_y_2 <- c(sprintf(\"{point.%s}\",c(\"rideable_id\",\"make_and_model\")),sprintf(\"{point.%s:.2f}\",c(\"battery_charge_percentage\",\"estimated_range_miles\")))\ntltip_2  <- tooltip_table(tltip_x_2,tltip_y_2)\n\nebike_batt_scatter <- hchart(\n  ebikes_at_station_df,\n  \"scatter\",\n  hcaes(\n    battery_charge_percentage, \n    estimated_range_miles, \n    color = make_and_model)\n  )|>\n  hc_xAxis(\n    title = list(text = \"Battery Charge Percentation\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Travel Distance Capability (miles)\"),\n    gridLineWidth = 0,\n    tickInterval = 20\n    ) |>\n  hc_title(\n    text = \"Ebikes Battery Efficiency\"\n    ) |>\n  hc_subtitle(\n    text = \"in New York\"\n    ) |>\n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"\",\n    pointFormat = tltip_2\n    ) %>% \n hc_add_theme(hc_theme_538())\n```\n```{r}\n# Additional Parameters\nlast_update_milis <- ebikes_at_station_df %>% pull(last_updated) %>% unique()\nlast_update_wib <- lubridate::as_datetime(last_update_milis, tz = \"Asia/Jakarta\")\n```\n\n#  {.sidebar}\n\nThis dashboard displays statistics for:\n\n|              |                     |\n|--------------|---------------------|\n| **Provider** | Citibike |\n| **Location**     | NYC  |\n| **Data Updated at**    | `{r} last_update_wib`   |\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\"}\n## Disclaimer\n\nThis dashboard is for educational purpose only. The data are downloaded from [Citibike GBFS Dataset](http://gbfs.citibikenyc.com/gbfs/gbfs.json) using the [GBFS](https://github.com/MobilityData/gbfs/blob/master/gbfs.md) - a standard for *bikesharing data* with many locations around the world.\n:::\n\n# Visualizations\n\n## Column\n\n```{r}\n#| title: E-Bikes Distribution across NYC\n\nebike_dist_bar\n```\n\n## Column\n\n### E-Bikes Usage and Station Occupancy\n ```{r}\n ebike_use_scatter\n ```\n\n### E-Bikes Battery Efficiency\n ```{r}\n ebike_batt_scatter\n ```","srcMarkdownNoYaml":"\n\n```{r}\n#| message: false\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(tidyverse)\nlibrary(highcharter)\n```\n\n```{r}\n# Import Tables from Citi Bike\njson_text <- fromJSON(\"https://gbfs.citibikenyc.com/gbfs/gbfs.json\")\n\n# Get Tables List\nfeeds <- json_text$data$en$feeds\n\n# Filter Necessary Tables\ninterested_datasets <- c(\"ebikes_at_stations\",\"station_information\",\"station_status\",\"system_regions\")\n\nfiltered_feeds <- feeds %>% filter(name %in% interested_datasets)\n\n# Create a named list of URLs for easier access\nurls_list <- setNames(filtered_feeds$url, filtered_feeds$name)\n```\n\n```{r}\n# Function to fetch and parse JSON data\nfetch_data <- function(url) {\n  response <- GET(url)\n  if (status_code(response) == 200) {\n    data <- content(response, \"text\")\n    json_data <- fromJSON(data)\n    return(as.data.frame(json_data))\n  } else {\n    stop(\"Failed to fetch data from\", url)\n  }\n}\n\n# Initialize an empty list to store the dataframes\ndataframes_list <- list()\n\n# Iterate over the urls_list to fetch and parse data for each dataset\nfor (name in names(urls_list)) {\n  url <- urls_list[[name]]\n  dataframes_list[[name]] <- fetch_data(url)\n}\n\nebikes_data_df <- dataframes_list[[\"ebikes_at_stations\"]]\nsystem_regions_df <- dataframes_list[[\"system_regions\"]]\nstation_info_data_df <- dataframes_list[[\"station_information\"]]\nstation_status_data_df <- dataframes_list[[\"station_status\"]]\n```\n\n```{r}\n# Wrangling\n## Ebikes Dataset\nflatten_ebikes <- function(row) {\n  # Extracting the nested list of ebikes\n  ebikes <- row[[\"data.stations.ebikes\"]]\n # If ebikes is NULL or empty, return a row with NA values for ebike attributes\n  if (is.null(ebikes) || length(ebikes) == 0) {\n    return(tibble(\n      conservative_range_miles = NA_real_,\n      estimated_range_miles = NA_real_,\n      rideable_id = NA_character_,\n      displayed_number = NA_character_,\n      docking_capability = NA_integer_,\n      make_and_model = NA_character_,\n      is_lbs_internal_rideable = NA_logical_,\n      battery_charge_percentage = NA_integer_\n    ))\n  }\n  # Flatten the nested ebikes data\n  ebikes_df <- map_df(ebikes, function(ebike) {\n    tibble(\n      conservative_range_miles = ebike$range_estimate$conservative_range_miles,\n      estimated_range_miles = ebike$range_estimate$estimated_range_miles,\n      rideable_id = ebike$rideable_id,\n      displayed_number = ebike$displayed_number,\n      docking_capability = ebike$docking_capability,\n      make_and_model = ebike$make_and_model,\n      is_lbs_internal_rideable = ebike$is_lbs_internal_rideable,\n      battery_charge_percentage = ebike$battery_charge_percentage\n    )\n  })\n  # Add other non-nested attributes to the flattened ebikes dataframe\n  ebikes_df <- ebikes_df %>%\n    mutate(\n      station_id = row[[\"data.stations.station_id\"]],\n      last_updated = row[[\"last_updated\"]],\n      ttl = row[[\"ttl\"]],\n      version = row[[\"version\"]]\n    )\n  \n  return(ebikes_df)\n}\n\nflattened_ebikes_df <- map_df(1:nrow(ebikes_data_df), function(i) {\n  flatten_ebikes(ebikes_data_df[i, ])\n})\n\nebikes_at_station_df  <- flattened_ebikes_df %>% \n    mutate(\n        station_id = str_replace_all(station_id, \".*_\", \"\")\n    )\n\n# stations datasets\ncolnames(station_info_data_df) <- gsub(\"^data\\\\.stations\\\\.\", \"\", colnames(station_info_data_df))\ncolnames(station_status_data_df) <- gsub(\"^data\\\\.stations\\\\.\", \"\", colnames(station_status_data_df))\ncolnames(system_regions_df)  <- gsub(\"^data\\\\.regions\\\\.\", \"\", colnames(system_regions_df))\n```\n\n```{r}\n# Aggregation\nebikes_at_station_agg  <- ebikes_at_station_df %>% \n    reframe(\n        n_ebike = n(),\n        mean_battery_pct = mean(battery_charge_percentage, na.rm = T),\n        .by = station_id\n    ) %>% \n    left_join(\n        station_info_data_df  %>% select(station_id, station_name = name, capacity,region_id, lat, lon),\n        join_by(station_id)\n    ) %>% \n    left_join(\n        system_regions_df  %>% select(region_id, region_name = name),\n        join_by(region_id)\n    ) %>% \n    mutate(\n        region_name = case_when(\n            is.na(region_name) ~ \"Others\",\n            TRUE ~ region_name\n        ),\n        pct_ebikes = n_ebike*100/capacity,\n        region_station = paste0(region_name,\": \",station_name))\n\ntop_ten_station  <- ebikes_at_station_agg %>%\n  select(region_station, pct_ebikes) %>%\n  arrange(desc(pct_ebikes)) %>%\n  head(10)\n\nebikes_at_station_count  <- ebikes_at_station_df %>% \n    select(station_id) %>%\n    left_join(\n        station_info_data_df %>% select(station_id, station_name = name,region_id),\n        join_by(station_id)\n    ) %>% \n    left_join(\n        system_regions_df  %>% select(region_id, region_name = name),\n        join_by(region_id)\n    ) %>% \n    mutate(\n        region_name = case_when(\n            is.na(region_name) ~ \"Others\",\n            TRUE ~ region_name\n        ),\n        region_station = paste0(region_name,\": \",station_name),\n        val = 1\n    )\n```\n```{r}\n# Visualization\n## Treemap: E-Bike distribution\n\ncols_1 <- c(\"#005f73\",\"#0a9396\",\"#94d2bd\",\"#e9d8a6\")\n\ntop_ten_station$clrs  <- highcharter::colorize(top_ten_station$pct_ebikes, cols_1)\ntt_x  <- c(\"Station Occupancy (%): \")\ntt_y  <- sprintf(\"{point.%s:.2f}\",c(\"pct_ebikes\"))\ntooltip_a  <- tooltip_table(tt_x,tt_y)\n\nebike_dist_bar <-hchart(\n  top_ten_station,\n  \"bar\",\n  hcaes(\n    region_station, \n    pct_ebikes,\n    color = clrs)\n  )|> \n   hc_xAxis(\n      categories = top_ten_station$region_station,\n      title = list(text = \"Station Occupancy\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Station\"),\n    gridLineWidth = 0\n    )  |>\n  hc_title(\n    text = \"Top Ten Occupied Stations\"\n    ) |> \n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = tooltip_a\n    ) |>\n  hc_add_theme(hc_theme_538())\n\n## scatterplot1: ebike usability\ntltip_x  <- c(\"Station\", \"District\", \"Capacity\", \"Occupancy\",\"Average Battery Percentage\")\ntltip_y <- c(sprintf(\"{point.%s}\",c(\"station_name\",\"region_name\")),sprintf(\"{point.%s:.2f}\",c(\"capacity\",\"pct_ebikes\",\"mean_battery_pct\")))\ntltip  <- tooltip_table(tltip_x,tltip_y)\n\nebike_use_scatter <- hchart(\n  ebikes_at_station_agg,\n  \"scatter\",\n  hcaes(\n    pct_ebikes, \n    mean_battery_pct, \n    size = capacity, \n    color = pct_ebikes),\n  minSize = 2,\n  maxSize = 20\n  )|>\n  hc_xAxis(\n    title = list(text = \"Station Occupancy\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Average Battery Percentage\"),\n    gridLineWidth = 0,\n    softMax = 90,\n    tickInterval = 10\n    ) |>\n  hc_title(\n    text = \"Ebikes Availability and Usage\"\n    ) |>\n  hc_subtitle(\n    text = \"in New York\"\n    ) |>\n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"\",\n    pointFormat = tltip\n    ) %>% \n hc_add_theme(hc_theme_538())\n\n## scatterplot2: battery efficiency\ntltip_x_2  <- c(\"Bike ID\", \"Model\",\"Battery Percentage\", \"Estimated Distance\")\ntltip_y_2 <- c(sprintf(\"{point.%s}\",c(\"rideable_id\",\"make_and_model\")),sprintf(\"{point.%s:.2f}\",c(\"battery_charge_percentage\",\"estimated_range_miles\")))\ntltip_2  <- tooltip_table(tltip_x_2,tltip_y_2)\n\nebike_batt_scatter <- hchart(\n  ebikes_at_station_df,\n  \"scatter\",\n  hcaes(\n    battery_charge_percentage, \n    estimated_range_miles, \n    color = make_and_model)\n  )|>\n  hc_xAxis(\n    title = list(text = \"Battery Charge Percentation\"),\n    gridLineWidth = 0\n    ) |>\n  hc_yAxis(\n    title = list(text = \"Travel Distance Capability (miles)\"),\n    gridLineWidth = 0,\n    tickInterval = 20\n    ) |>\n  hc_title(\n    text = \"Ebikes Battery Efficiency\"\n    ) |>\n  hc_subtitle(\n    text = \"in New York\"\n    ) |>\n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"\",\n    pointFormat = tltip_2\n    ) %>% \n hc_add_theme(hc_theme_538())\n```\n```{r}\n# Additional Parameters\nlast_update_milis <- ebikes_at_station_df %>% pull(last_updated) %>% unique()\nlast_update_wib <- lubridate::as_datetime(last_update_milis, tz = \"Asia/Jakarta\")\n```\n\n#  {.sidebar}\n\nThis dashboard displays statistics for:\n\n|              |                     |\n|--------------|---------------------|\n| **Provider** | Citibike |\n| **Location**     | NYC  |\n| **Data Updated at**    | `{r} last_update_wib`   |\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\"}\n## Disclaimer\n\nThis dashboard is for educational purpose only. The data are downloaded from [Citibike GBFS Dataset](http://gbfs.citibikenyc.com/gbfs/gbfs.json) using the [GBFS](https://github.com/MobilityData/gbfs/blob/master/gbfs.md) - a standard for *bikesharing data* with many locations around the world.\n:::\n\n# Visualizations\n\n## Column\n\n```{r}\n#| title: E-Bikes Distribution across NYC\n\nebike_dist_bar\n```\n\n## Column\n\n### E-Bikes Usage and Station Occupancy\n ```{r}\n ebike_use_scatter\n ```\n\n### E-Bikes Battery Efficiency\n ```{r}\n ebike_batt_scatter\n ```"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","page-layout":"custom","title":"Citibike Availability and Usage","author":"in NYC District","orientation":"columns","theme":"darkly"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}